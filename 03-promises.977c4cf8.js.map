{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,UAAWH,SAASC,cAAc,iBAClCG,eAAgBJ,SAASC,cAAc,oBAgCzC,SAASI,EAAcC,EAAUJ,GAC/B,OAAO,IAAIK,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEF,WAAUJ,UAEpBO,EAAO,CAAEH,WAAUJ,S,GAEpBA,E,IAtCPJ,EAAKC,KAAKe,iBAAiB,UAE3B,SAAkBC,GAChBA,EAAIC,iBAEJ,IADA,IAA2CC,EAkBpC,CACLf,MAAOgB,OAAOpB,EAAKI,MAAMiB,OACzBhB,UAAWe,OAAOpB,EAAKK,UAAUgB,OACjCf,eAAgBc,OAAOpB,EAAKM,eAAee,QArBvCC,EAAqCH,EAArCf,MAAOC,EAA8Bc,EAA9Bd,UAAWC,EAAmBa,EAAnBb,eACfiB,EAAI,EAAGA,GAAKjB,EAAgBiB,GAAK,EACxChB,EAAcgB,EAAGD,GACdE,MAAK,SAAAC,G,IAAGjB,EAAQiB,EAARjB,SAAUJ,EAAKqB,EAALrB,MACjBsB,EAAA5B,GAAS6B,OAAOC,QACd,uBAAwCC,OAAfrB,EAAS,QAAYqB,OAANzB,EAAM,M,IAGjD0B,OAAM,SAAAL,G,IAAGjB,EAAQiB,EAARjB,SAAUJ,EAAKqB,EAALrB,MAClBsB,EAAA5B,GAAS6B,OAAOI,QACd,sBAAqCF,OAAfrB,EAAS,QAAYqB,OAANzB,EAAM,M,IAGjDkB,GAASjB,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  delayStep: document.querySelector('[name=\"step\"]'),\n  amountPromises: document.querySelector('[name=\"amount\"]'),\n};\n\nrefs.form.addEventListener('submit', onSubmit);\n\nfunction onSubmit(evt) {\n  evt.preventDefault();\n  let { delay, delayStep, amountPromises } = valueForm();\n  for (let i = 1; i <= amountPromises; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += delayStep;\n  }\n}\n\nfunction valueForm() {\n  return {\n    delay: Number(refs.delay.value),\n    delayStep: Number(refs.delayStep.value),\n    amountPromises: Number(refs.amountPromises.value),\n  };\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","delayStep","amountPromises","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","evt","preventDefault","ref","Number","value","delay1","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.977c4cf8.js.map"}